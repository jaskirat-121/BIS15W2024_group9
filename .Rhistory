Unique_to_Mouse = Temp$num_unique_mouse
)
counts_matrix <- t(as.matrix(plot_data[, -1]))  # Exclude the first column (Protein names)
barplot(counts_matrix,
beside = TRUE,
col = c("red", "green", "blue"),
legend.text = c("Overlapping", "Unique to Human", "Unique to Mouse"),
args.legend = list(title = "Category", x = "topright", cex = 0.8),
names.arg = plot_data$Protein,
main = "GO Terms per Protein",
xlab = "Protein",
ylab = "Number of GO Terms,
las =2")
Temp$Overlapping_GOterms <- as.character(Temp$Overlapping_GOterms)
Temp$Unique_to_Human <- as.character(Temp$Unique_to_Human)
Temp$Unique_to_Mouse <- as.character(Temp$Unique_to_Mouse)
Temp$num_overlapping <- sapply(strsplit(Temp$Overlapping_GOterms, ", "), length)
Temp$num_unique_human <- sapply(strsplit(Temp$Unique_to_Human, ", "), length)
Temp$num_unique_mouse <- sapply(strsplit(Temp$Unique_to_Mouse, ", "), length)
plot_data <- data.frame(
Protein = Temp$node2,  # Or another column that contains protein names
Overlapping = Temp$num_overlapping,
Unique_to_Human = Temp$num_unique_human,
Unique_to_Mouse = Temp$num_unique_mouse
)
counts_matrix <- t(as.matrix(plot_data[, -1]))  # Exclude the first column (Protein names)
barplot(counts_matrix,
beside = TRUE,
col = c("red", "green", "blue"),
legend.text = c("Overlapping", "Unique to Human", "Unique to Mouse"),
args.legend = list(title = "Category", x = "topright", cex = 0.8),
names.arg = plot_data$Protein,
main = "GO Terms per Protein",
xlab = "Protein",
ylab = "Number of GO Terms,
las =2")
Temp$Overlapping_GOterms <- as.character(Temp$Overlapping_GOterms)
Temp$Unique_to_Human <- as.character(Temp$Unique_to_Human)
Temp$Unique_to_Mouse <- as.character(Temp$Unique_to_Mouse)
Temp$num_overlapping <- sapply(strsplit(Temp$Overlapping_GOterms, ", "), length)
Temp$num_unique_human <- sapply(strsplit(Temp$Unique_to_Human, ", "), length)
Temp$num_unique_mouse <- sapply(strsplit(Temp$Unique_to_Mouse, ", "), length)
plot_data <- data.frame(
Protein = Temp$node2,  # Or another column that contains protein names
Overlapping = Temp$num_overlapping,
Unique_to_Human = Temp$num_unique_human,
Unique_to_Mouse = Temp$num_unique_mouse
)
counts_matrix <- t(as.matrix(plot_data[, -1]))  # Exclude the first column (Protein names)
barplot(counts_matrix,
beside = TRUE,
col = c("red", "green", "blue"),
legend.text = c("Overlapping", "Unique to Human", "Unique to Mouse"),
args.legend = list(title = "Category", x = "topright", cex = 0.8),
names.arg = plot_data$Protein,
main = "GO Terms per Protein",
xlab = "Protein",
ylab = "Number of GO Terms,
las = 2")  # Rotate x-axis labels
Temp$Overlapping_GOterms <- as.character(Temp$Overlapping_GOterms)
Temp$Unique_to_Human <- as.character(Temp$Unique_to_Human)
Temp$Unique_to_Mouse <- as.character(Temp$Unique_to_Mouse)
Temp$num_overlapping <- sapply(strsplit(Temp$Overlapping_GOterms, ", "), length)
Temp$num_unique_human <- sapply(strsplit(Temp$Unique_to_Human, ", "), length)
Temp$num_unique_mouse <- sapply(strsplit(Temp$Unique_to_Mouse, ", "), length)
plot_data <- data.frame(
Protein = Temp$node2,  # Or another column that contains protein names
Overlapping = Temp$num_overlapping,
Unique_to_Human = Temp$num_unique_human,
Unique_to_Mouse = Temp$num_unique_mouse
)
counts_matrix <- t(as.matrix(plot_data[, -1]))  # Exclude the first column (Protein names)
barplot(counts_matrix,
beside = TRUE,
col = c("red", "green", "blue"),
legend.text = c("Overlapping", "Unique to Human", "Unique to Mouse"),
args.legend = list(title = "Category", x = "topright", cex = 0.8),
names.arg = plot_data$Protein,
main = "GO Terms per Protein",
xlab = "Protein",
ylab = "Number of GO Terms",
las = 2)  # Rotate x-axis labels
View(counts_matrix)
View(find_overlaps)
View(find_overlaps)
View(unique_terms_df)
View(Temp)
Temp$Overlapping_GOterms <- as.character(Temp$Overlapping_GOterms)
Temp$Unique_to_Human <- as.character(Temp$Unique_to_Human)
Temp$Unique_to_Mouse <- as.character(Temp$Unique_to_Mouse)
Temp$num_overlapping <- sapply(strsplit(Temp$Overlapping_GOterms, ", "), length)
Temp$num_unique_human <- sapply(strsplit(Temp$Unique_to_Human, ", "), length)
Temp$num_unique_mouse <- sapply(strsplit(Temp$Unique_to_Mouse, ", "), length)
plot_data <- data.frame(
Protein = Temp$node2,  # Or another column that contains protein names
Overlapping = Temp$num_overlapping,
Unique_to_Human = Temp$num_unique_human,
Unique_to_Mouse = Temp$num_unique_mouse
)
counts_matrix <- t(as.matrix(plot_data[, -1]))  # Exclude the first column (Protein names)
barplot(counts_matrix,
beside = TRUE,
col = c("red", "green", "blue"),
legend.text = c("Overlapping", "Unique to Human", "Unique to Mouse"),
args.legend = list(title = "Category", x = "topright", cex = 0.8),
names.arg = plot_data$Protein,
main = "GO Terms per Protein",
xlab = "Protein",
ylab = "Number of GO Terms",
las = 2)  # Rotate x-axis labels
View(Temp)
select(Temp,num_overlapping)
library(tidyverse)
select(Temp,num_overlapping)
select(Temp,num_unique_human)
View(Mice_Goterms)
View(Mice_GOterm_data)
View(Mice_Goterms)
View(Temp1)
human_frequency <- count(Temp1,'Unique_to_Human')
View(human_frequency)
View(find_overlaps)
View(Human_Goterms)
View(Human_GOterm_data)
View(Mice_GOterm_data)
human_frequency <- count(Human_GOterm_data, 'GO_term_name')
mouse_frequency <- count(Mice_GOterm_data, 'GO_term_name')
install.packages("dplyr")
library("dplyr")
human_top_frequency <- human_frequency %>%
as.data.frame() %>%
arrange(desc(freq))
install.packages("dplyr")
View(Mice_string_data)
View(mouse_frequency)
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
human_top_frequency <- human_frequency %>%
as.data.frame() %>%
arrange(desc(freq))
human_frequency <- count(Human_GOterm_data, 'GO_term_name')
mouse_frequency <- count(Mice_GOterm_data, 'GO_term_name')
install.packages("dplyr")
library("dplyr"
install.packages("dplyr")
install.packages('dplyr')
human_top_frequency <- human_frequency %>%
as.data.frame() %>%
arrange(desc(freq))
install.packages('dplyr')
install.packages("dplyr")
install.packages("tidyverse")
version()
version
hi
hi
spring_1 <- c(36.25, 35.40, 35.30)
spring_2 <- c(35.15, 35.35, 33.35)
spring_3 <- c(30.70, 29.65, 29.20)
spring_4 <- c(39.70, 40.05, 38.65)
spring_5 <- c(31.85, 31.40, 29.30)
spring_6 <- c(30.20, 30.65, 29.75)
spring_7 <- c(32.90, 32.50, 32.80)
spring_8 <- c(36.80, 36.45, 33.15)
hot_springs <- c(spring_1, spring_2, spring_3, spring_4, spring_5, spring_6, spring_7, spring_8)
hot_springs
hot_springs_temp_matrix <- matrix(hot_springs, nrow = 8, byrow = T)
hot_springs_temp_matrix <- matrix(hot_springs, nrow = 8, byrow = T)
hot_springs_temp_matrix
hot_springs_temp_matrix <- matrix(hot_springs, nrow = 8, byrow = F)
hot_springs_temp_matrix
hot_springs_temp_matrix <- matrix(hot_springs, nrow = 8, byrow = T)
hot_springs_temp_matrix
scientist <- c("Jill", "Steve", "Susan")
scientist <- c("Jill", "Steve", "Susan")
scientist
location <- c("spring_1", "spring_2", "spring_3", "spring_4", "spring_5", "spring_6", "spring_7", "spring_8")
location
colnames(hot_sptings_temp_matrix) <- scientist
colnames(hot_springs_temp_matrix) <- scientist
rownames(hot_springs_temp_matrix) <- location
colnames(hot_springs_temp_matrix) <- scientist
rownames(hot_springs_temp_matrix) <- location
hot_springs_temp_matrix
actual_location <- c("Bluebell_spring", "Opal_spring", "Riverside_spring", "Too_hot_spring", "Mystery_spring", "Emerald_spring", "Black_spring", "Pearl-spring")
colnames(hot_springs_temp_matrix) <- actual_location
hot_springs_temp_matrix <- matrix(hot_springs, nrow = 8, byrow = T)
hot_springs_temp_matrix
hot_springs_temp_matrix <- matrix(hot_springs, nrow = 8, byrow = T)
hot_springs_temp_matrix
scientist <- c("Jill", "Steve", "Susan")
scientist
rownames(hot_springs_temp_matrix) <- location
hot_springs_temp_matrix
colnames(hot_springs_temp_matrix) <- scientist
hot_springs_temp_matrix
hot_springs_temp_matrix <- matrix(hot_springs, nrow = 8, byrow = T)
hot_springs_temp_matrix
colnames(hot_springs_temp_matrix) <- scientist
hot_springs_temp_matrix
rownames(hot_springs_temp_matrix) <- actual_location
hot_springs_temp_matrix
Bluebell_spring_mean <- hot_springs_temp_matrix[1, ]
mean(Bluebell_spring_mean)
Bluebell_spring_mean <- hot_springs_temp_matrix[1, ]
mean(Bluebell_spring_mean)
Bluebell_spring_mean
Bluebell_spring_mean <- hot_springs_temp_matrix[1, ]
Bluebell_spring_mean <- mean(Bluebell_spring_mean)
Bluebell_spring_mean
Bluebell_spring_mean <- hot_springs_temp_matrix[1, ]
Bluebell_spring_mean <- mean(Bluebell_spring_mean)
Bluebell_spring_mean
Bluebell_spring_mean <- hot_springs_temp_matrix[1, ]
Bluebell_spring_mean <- mean(Bluebell_spring_mean)
Opal_spring_mean <- hot_springs_temp_matrix[2, ]
Opal_spring_mean <- mean(Opal_spring_mean)
Riverside_spring_mean <- hot_springs_temp_matrix[3, ]
Riverside_spring_mean <- mean(Riverside_spring_mean)
Too_hot_spring_mean <- hot_springs_temp_matrix[4, ]
Too_hot_spring_mean <- mean(Too_hot_spring_mean)
Mystery_spring_mean <- hot_springs_temp_matrix[5, ]
Mystery_spring_mean <- mean(Mystery_spring_mean)
Emerald_spring_mean <- hot_springs_temp_matrix[6, ]
Emerald_spring_mean <- mean(Emerald_spring_mean)
Black_spring_mean <- hot_springs_temp_matrix[7, ]
Black_spring_mean <- mean(Black_spring_mean)
Pearl_spring_mean <- hot_springs_temp_matrix[8, ]
Pearl_spring_mean <- mean(Pearl_spring_mean)
spring_means <- c(Bluebell_spring_mean, Opal_spring_mean, Riverside_spring_mean, Too_hot_spring_mean, Mystery_spring_mean, Emerald_spring_mean, Black_spring_mean, Pearl_spring_mean)
hot_springs_temp_matrix <- cbind(hot_springs_temp_matrix, spring_means)
hot_springs_temp_matrix
hot_springs_temp_matrix[2,3]
Jill_mean <- hot_springs_temp_matrix[ ,1]
mean(Jill_mean)
#find the average temperature from all 8 springs combined
Overall_mean <- hot_springs_temp_matrix[ ,4]
mean(Overall_mean)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
dim(homerange)
names(homerange)
glimpse(homerange)
summary(homerange)
homerange$taxon <- as.factor(homerange$taxon)
levels(homerange$taxon)
homerange$order <- as.factor(homerange$order)
levels(homerange$order)
class(homerange$taxon)
class(homerange$order)
table(homerange$taxon)
taxa <- select(homerange, taxon:species)
Sex <- c("male", "female", "male")
Length <- c(3.2, 3.7, 3.4)
Weight <- c(2.9, 4.0, 3.1)
hbirds <- data.frame(Sex, Length, Weight)
hbirds
taxon <- c("birds","lake fishes","lizards","mammals","marine_fishes","river_fishes","snakes","tortoises"<"turtles")
counts <- c(140,9,11,238,90,14,41,12,14)
taxon_homerange <- data.frame(taxon,counts)
taxon <- c("birds","lake fishes","lizards","mammals","marine_fishes","river_fishes","snakes","tortoises","turtles")
counts <- c(140,9,11,238,90,14,41,12,14)
taxon_homerange <- data.frame(taxon,counts)
taxon_homerange
View(taxon_homerange)
View(homerange)
tropic_guild <- c("carnivore","herbivore")
counts_tropic_guild <- c(342,227)
tropic_guild_homerange <- data.frame(tropic_guild,counts_tropic_guild)
tropic_guild_homerange
knitr::opts_chunk$set(echo = TRUE)
owls <- filter(homerange, order=="strigiformes")
library(tidyverse)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
homerange$taxon <- as.factor(homerange$taxon)
levels(homerange$taxon)
homerange$order <- as.factor(homerange$order)
levels(homerange$order)
table(homerange$taxon)
taxa <- select(homerange, taxon:species)
taxa
table(homerange$taxon)
taxon <- c("birds","lake fishes","lizards","mammals","marine_fishes","river_fishes","snakes","tortoises","turtles")
counts <- c(140,9,11,238,90,14,41,12,14)
taxon_homerange <- data.frame(taxon,counts)
taxon_homerange
table(homerange$trophic.guild)
tropic_guild <- c("carnivore","herbivore")
counts_tropic_guild <- c(342,227)
tropic_guild_homerange <- data.frame(tropic_guild,counts_tropic_guild)
tropic_guild_homerange
homerange_carnivores <- filter(homerange, trophic.guild=="carnivore")
homerange_herbivores <- filter(homerange, trophic.guild=="herbivore")
mean(homerange_carnivores$mean.hra.m2, na.rm=T)
mean(homerange_herbivores$mean.hra.m2, na.rm=T)
owls <- filter(homerange, order=="strigiformes")
owls <- select(owls, "mean.mass.g","log10.mass","family","genus","species")
min(owls$mean.mass.g)
smallest_owl <- filter(owls, mean.mass.g==61.32)
smallest_owl_final <-
owls <- filter(homerange, order=="strigiformes")
owls <- select(owls, "mean.mass.g","log10.mass","family","genus","species")
min(owls$mean.mass.g)
smallest_owl <- filter(owls, mean.mass.g==61.32)
View(smallest_owl)
owls <- filter(homerange, order=="strigiformes")
owls <- select(owls, "mean.mass.g","log10.mass","family","genus","species")
min(owls$mean.mass.g)
smallest_owl <- filter(homerange, mean.mass.g==61.32)
View(smallest_owl)
owls <- filter(homerange, order=="strigiformes")
owls <- select(owls, "mean.mass.g","log10.mass","family","genus","species")
min(owls$mean.mass.g)
smallest_owl <- filter(homerange, mean.mass.g==61.32)
smallest_owl <- select(smallest_owl, "common_names", "mean.mass.g","log10.mass","family","genus","species")
owls <- filter(homerange, order=="strigiformes")
owls <- select(owls, "mean.mass.g","log10.mass","family","genus","species")
min(owls$mean.mass.g)
smallest_owl <- filter(homerange, mean.mass.g==61.32)
smallest_owl <- select(smallest_owl, "common,name", "mean.mass.g","log10.mass","family","genus","species")
owls <- filter(homerange, order=="strigiformes")
owls <- select(owls, "mean.mass.g","log10.mass","family","genus","species")
min(owls$mean.mass.g)
smallest_owl <- filter(homerange, mean.mass.g==61.32)
smallest_owl <- select(smallest_owl, "common.name", "mean.mass.g","log10.mass","family","genus","species")
smallest_owl
View(homerange)
View(homerange)
knitr::opts_chunk$set(echo = TRUE)
homerange %>%
filter(taxon=="birds") %>%
select(taxon, common.name, order, family, genus, species, mean.hra.m2) %>%
arrange(mean.hra.m2)
homerange %>%
filter(taxon =="birds") %>%
select(taxon, common.name, order, family, genus, species, mean.hra.m2) %>%
arrange(mean.hra.m2)
homerange %>%
filter(taxon ="birds") %>%
select(taxon, common.name, order, family, genus, species, mean.hra.m2) %>%
arrange(mean.hra.m2)
library(tidyverse)
homerange %>%
filter(taxon =="birds") %>%
select(taxon, common.name, order, family, genus, species, mean.hra.m2) %>%
arrange(mean.hra.m2)
homerange %>%
filter(taxon =="birds") %>%
select(taxon, common.name, order, family, genus, species, mean.hra.m2) %>%
arrange(asec(mean.hra.m2))
homerange %>%
filter(taxon =="birds") %>%
select(taxon, common.name, order, family, genus, species, mean.hra.m2) %>%
arrange(desc(mean.hra.m2))
library("tidyverse")
library("janitor")
library("tidyverse")
library("janitor")
hello
setwd("C:/Users/singh/OneDrive/Desktop/BIS15W2024_group9")
knitr::opts_chunk$set(echo = TRUE)
health_data <- read_csv("ss.csv")
library(tidverse)
library(tidyverse)
health_data <- read_csv("ss.csv")
View(health_data)
library(tidyverse)
library(janitor)
health_data <- read_csv("ss.csv")
clean_names(health_data)
View(health_data)
health_data <- read_csv("ss.csv")
health_data <- clean_names(health_data)
health_data %>%
ggplot(aes(x=occupation, y=sleep_duration))+
geom_col()
health_data %>%
group_by(occupation) %>%
summarize(average_sleep=mean(sleep_duration))
health_data %>%
group_by(occupation) %>%
summarize(average_sleep=mean(sleep_duration)) %>%
ggplot(aes(x=occupation, y=average_duration))+
geom_col()
health_data %>%
group_by(occupation) %>%
summarize(average_sleep_duration=mean(sleep_duration)) %>%
ggplot(aes(x=occupation, y=average_sleep_duration))+
geom_col()
health_data %>%
ggplot(aes(x=occupation))+
geom_boxplot()
health_data %>%
ggplot(aes(x=occupation, y=sleep_duration))+
geom_boxplot()
health_data %>%
ggplot(aes(x=occupation, y=sleep_duration))+
geom_boxplot()+
scale_y_log10()
homerange %>%
count(occupation)
health_data %>%
count(occupation)
health_data %>%
count(occupation, sort=T)
health_data %>%
count(occupation, sort=T)
health_data %>%
group_by(occupation) %>%
summarize(average_sleep_duration=mean(sleep_duration)) %>%
ggplot(aes(x=occupation, y=average_sleep_duration))+
geom_col()+
theme_light()
library(tidyverse)
library(janitor)
library(paletteer)
library(tidyverse)
library(janitor)
library(paletteer)
library(ggthemes)
colors <- paletteer::palettes_d_names
View(colors)
my_palette <- paletteer_d("
awtools::bpalette")
my_palette <- paletteer_d("awtools::bpalette")
health_data %>%
scale_fill_manual(values=my_palette)
group_by(occupation) %>%
summarize(average_sleep_duration=mean(sleep_duration)) %>%
ggplot(aes(x=occupation, y=average_sleep_duration))+
geom_col()+
health_data %>%
scale_fill_manual(values=my_palette) %>%
group_by(occupation) %>%
summarize(average_sleep_duration=mean(sleep_duration)) %>%
ggplot(aes(x=occupation, y=average_sleep_duration))+
geom_col()+
health_data %>%
scale_fill_manual(values=my_palette) %>%
group_by(occupation) %>%
summarize(average_sleep_duration=mean(sleep_duration)) %>%
ggplot(aes(x=occupation, y=average_sleep_duration))+
geom_col()
health_data %>%
scale_fill_manual(values=my_palette) %>%
group_by(occupation) %>%
summarize(average_sleep_duration=mean(sleep_duration)) %>%
ggplot(aes(x=occupation, y=average_sleep_duration))+
geom_col()
health_data %>%
scale_fill_manual(values=my_palette) %>%
group_by(occupation) %>%
summarize(average_sleep_duration=mean(sleep_duration)) %>%
ggplot(aes(x=occupation, y=average_sleep_duration))+
geom_col()
health_data %>%
scale_fill_manual(values=my_palette) %>%
group_by(occupation) %>%
summarize(average_sleep_duration=mean(sleep_duration)) %>%
ggplot(aes(x=occupation, y=average_sleep_duration, fill=occupation))+
geom_col()
health_data %>%
group_by(occupation) %>%
summarize(average_sleep_duration=mean(sleep_duration)) %>%
ggplot(aes(x=occupation, y=average_sleep_duration, fill=occupation))+
geom_col()+
scale_fill_manual(values=my_palette)
health_data %>%
group_by(occupation) %>%
summarize(average_sleep_duration=mean(sleep_duration)) %>%
ggplot(aes(x=occupation, y=average_sleep_duration, fill=occupation))+
geom_col()+
scale_fill_manual(values=my_palette)+
theme_classic()
health_data %>%
group_by(occupation) %>%
summarize(average_sleep_duration=mean(sleep_duration)) %>%
ggplot(aes(x=occupation, y=average_sleep_duration, fill=occupation))+
geom_col()+
scale_fill_manual(values=my_palette)+
theme_classic()+
coord_flip()
health_data %>%
group_by(occupation) %>%
summarize(average_sleep_duration=mean(sleep_duration)) %>%
ggplot(aes(x=occupation, y=average_sleep_duration, fill=occupation))+
geom_col()+
scale_fill_manual(values=my_palette)+
theme_classic()+
coord_flip()+
labs(title="Average Sleep Duration For Various Occupations")
health_data %>%
ggplot(aes(x=occupation, y=sleep_duration))+
geom_boxplot()+
scale_fill_manual(values=my_palette)+
theme_classic()+
labs(title="Average Sleep Duration Ranges For Various Occupations")
health_data %>%
ggplot(aes(x=occupation, y=sleep_duration, fill=occupation))+
geom_boxplot()+
scale_fill_manual(values=my_palette)+
theme_classic()+
labs(title="Average Sleep Duration Ranges For Various Occupations")
health_data %>%
ggplot(aes(x=occupation, y=sleep_duration, fill=occupation))+
geom_boxplot()+
scale_fill_manual(values=my_palette)+
theme_classic()+
labs(title="Average Sleep Duration Ranges For Various Occupations")+
theme(axis.text.x=element_text(angle=60,hjust=1))
